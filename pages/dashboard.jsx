import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import styles from "../styles/Home.module.css";
import { withIronSessionSsr } from "iron-session/next";
import sessionOptions from "../config/session";
import Header from "../components/header";
import useLogout from "../hooks/useLogout";
import dbConnect from "@/db/connection";
import User from "@/db/models/user"
import HoroscopeSchema from "@/db/models/horoscope";
import GenreSchema from "@/db/models/genre";
import MusicSchema from "@/db/models/musicRecs";
import RecsGenreSchema from "@/db/models/recsAndGenres";
import fetchHoroscope from '../utils/fetchHoroscope'
import fetchSpotify from '../utils/fetchSpotify'
import fetchGenres from '../utils/fetchGenres'
import { randomGenres } from '../pages/api/genre'

export const getServerSideProps = withIronSessionSsr(
  async function getServerSideProps({ req }) {
    const user = req.session.user;
    const props = {};
    await dbConnect()
    if (user) {
      props.user = req.session.user;
      props.isLoggedIn = true;

      try {
        const dbUser = await User.findOne({ username: user.username })
        //console.log('Username:', dbUser)
        if (!dbUser) {
          console.error(`User not found for username: ${user.username}`)
        }
        const zodiac = dbUser.zodiac

        const horoscopeData = await fetchHoroscope(zodiac)
        //console.log("Horoscope Data", horoscopeData)
        props.horoscope = horoscopeData || { prediction: 'No horoscope' }
        //console.log("Horoscope Props", props.horoscope)

        const spotifyGenres = await fetchGenres()
        if (!spotifyGenres) {
          throw new Error('No genres avaliable')
        }
        const randomizedGenres = randomGenres(spotifyGenres, 3)
        console.log("Random Genres", randomizedGenres)


        const spotifyData = await fetchSpotify(randomizedGenres)

        //console.log("Spotify Data", spotifyData)
        props.spotifyData = spotifyData || []
        //console.log("Spotify Props", props.spotifyData)
      } catch (err) {
        console.error('Error fetching:', err)
        props.horoscope = { horoscope: 'Error fetching horoscope' }
        props.spotifyData = []
      }









    } else {
      props.isLoggedIn = false;
      props.horoscope = { prediction: 'No horoscope' }
    }
    return { props };
  },
  sessionOptions
);

export default function Dashboard(props) {
  const router = useRouter();
  const logout = useLogout();
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header isLoggedIn={props.isLoggedIn} username={props.user.username} />

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to a <a href="https://nextjs.org">Next.js!</a> Dashboard Page!
        </h1>

        <p className={styles.description}>
          Current Location: <code className={styles.code}>{router.asPath}</code>
          <br />
          Status:{" "}
          <code className={styles.code}>
            {!props.isLoggedIn && " Not"} Logged In
          </code>
        </p>

        <p className={styles.description}>
          This page is only visible if you are logged in.
        </p>

        <div className={styles.grid}>
          <Link href="/" className={styles.card}>
            <h2>Home &rarr;</h2>
            <p>Return to the homepage.</p>
          </Link>

          <div
            onClick={logout}
            style={{ cursor: "pointer" }}
            className={styles.card}
          >
            <h2>Logout &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </div>
        </div>
        {props.isLoggedIn && (
          <>

            <h2>Horoscopes</h2>
            <p>{props.horoscope.prediction}</p>
            <h2>Spotify Recommendations</h2>
            {props.spotifyData.length > 0 ? (
              <ul>
                {props.spotifyData.map((track) => (
                  <li key={track.id}>
                    <a
                      href={track.external_urls.spotify}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {track.name}
                    </a>
                  </li>
                ))}
              </ul>
            ) : (
              <p> Loading recs..</p>
            )}


          </>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
